/**
    This file is part of MiniFluxDiv.

    MiniFluxDiv is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    MiniFluxDiv is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MiniFluxDiv. If not, see <http://www.gnu.org/licenses/>.
 **/

#include <vector>

extern "C" void pipeline_minifluxdiv(int N, void * box_void_arg, void * sums_void_arg);

using namespace std;

//<Variables>

typedef double Real;

//<Data Structure>
typedef struct _MiniFluxDivData {
    int numCell;
    int numBox;
    int numComp;
    int nThreads;
    int nGhost;
    // The size of the 3D data is (numCell+2*nGhost)^3
    int fullNumCell;
    int fullNumCell2;
    int fullNumCell3;

    double innerTime;

    Real **sums;
} MiniFluxDivData;

#define DEBUG 0

//<Macros>
#define ABS(x)  ((x)<0)?-(x):(x)
#define EPS .001
#define N_A  1E20

#define NBOXES 32
#define NCELLS 128
#define NTHREADS 1
#define NDIMS 3
#define NCOMP 5
#define NGHOST 2

#define XS TILE_SIZE
#define YS TILE_SIZE
#define ZS TILE_SIZE

#define GET_OFFSET(c,z,y,x) (c)*full_numCell3 + ((z)+nGhost)*full_numCell2 + ((y)+nGhost)*full_numCell + ((x)+nGhost)

#undef GET_VAL_PTR
#define GET_VAL_PTR(b,c,z,y,x) (b)+ (c)*full_numCell3 + ((z)+nGhost) * full_numCell2 +\
                    ((y)+nGhost)*full_numCell+((x)+nGhost)

#define GET_FACE_VAL_PTR(d,b,c,z,y,x) (b)+\
        (c)*(numCell+((d)==2))*(numCell+((d)==1))*(numCell+((d)==0)) +\
        (z)*(numCell+((d)==1))*(numCell+((d)==0))+\
        (y)*(numCell+((d)==0))+(x)

#define p_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,0,z,y,x))
#define e_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,1,z,y,x))
#define u_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,2,z,y,x))
#define v_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,3,z,y,x))
#define w_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,4,z,y,x))

#define p_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,0,z,y,x))
#define e_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,1,z,y,x))
#define u_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,2,z,y,x))
#define v_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,3,z,y,x))
#define w_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,4,z,y,x))

#define p_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,0,z,y,x))
#define e_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,1,z,y,x))
#define u_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,2,z,y,x))
#define v_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,3,z,y,x))
#define w_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,4,z,y,x))

#define p_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,0,z,y,x))
#define e_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,1,z,y,x))
#define u_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,2,z,y,x))
#define v_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,3,z,y,x))
#define w_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,4,z,y,x))

#define p_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,0,z,y,x))
#define e_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,1,z,y,x))
#define u_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,2,z,y,x))
#define v_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,3,z,y,x))
#define w_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,4,z,y,x))

#define p_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,0,z,y,x))
#define e_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,1,z,y,x))
#define u_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,2,z,y,x))
#define v_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,3,z,y,x))
#define w_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,4,z,y,x))

inline void sumsToBoxes(Real **sums, Real **new_boxes, int numBox, int numCell) {
    int numComp = NCOMP;
    int nGhost = NGHOST;
    int full_numCell = numCell + 2*nGhost;
    int full_numCell2 = full_numCell * full_numCell;
    int full_numCell3 = full_numCell * full_numCell * full_numCell;

    if (DEBUG) fprintf(stderr, "S,c,z,y,x,i,v\n");

    for (int i = 0; i < numBox; i++) {
        double *sum = sums[i];
        double *box = new_boxes[i];

        for (int z = 0; z < numCell; z++) {
            for (int y = 0; y < numCell; y++) {
                for (int x = 0; x < numCell; x++) {
                    for (int c = 0; c < numComp; c++) {
                        int ndx = c * full_numCell3 + z * full_numCell2 + y * full_numCell + x;
                        *(GET_VAL_PTR(box, c, z, y, x)) = sum[ndx];

                        if (DEBUG) fprintf(stderr, "%d,%d,%d,%d,%d,%d,%g\n", i, c, z, y, x, ndx, sum[ndx]);
                    }
                }
            }
        }
    }
}

inline void miniFluxDiv_alloc(MiniFluxDivData* data) {
    int nComp = data->numComp;
    int nCells = data->numCell;
    int nGhost = data->nGhost;
    int fullNumCell = data->fullNumCell;
    int fullNumCell2 = data->fullNumCell2;
    int fullNumCell3 = data->fullNumCell3;

    double dx = 0.5;

    data->innerTime = 0.0;

    data->sums = (Real **) calloc(data->numBox, sizeof(Real *));

    //if (DEBUG) fprintf(stderr, "b,c,z,y,x,i,v\n");

    for (int i = 0; i < data->numBox; i++) {
        data->sums[i] = (Real *) calloc(nComp * fullNumCell3, sizeof(Real));
        Real *sum = data->sums[i];

        for (int z = 0; z < fullNumCell; z++) {
            for (int y = 0; y < fullNumCell; y++) {
                for (int x = 0; x < fullNumCell; x++) {
                    double sub = dx * (z + y + x - (3 * nGhost));

                    int c = 0;
                    int ndx = c * fullNumCell3 + z * fullNumCell2 + y * fullNumCell + x;
                    sum[ndx] = dx * ((z - nGhost) + (y - nGhost) + (x - nGhost));

                    for (int c = 1; c < nComp; c++) {
                        ndx = c * fullNumCell3 + z * fullNumCell2 + y * fullNumCell + x;
                        sum[ndx] = ((double) c) + sub;
                        //if (DEBUG) fprintf(stderr, "%d,%d,%d,%d,%d,%d,%g\n", i, c, z, y, x, ndx, sum[ndx]);
                    }
                }
            }
        }
    }
}   // miniFluxDiv_alloc

inline void miniFluxDiv_kernel(Real **old_boxes, Real **new_boxes, MiniFluxDivData* data) {
    //<Insert your kernel code here...>
    int numBox = data->numBox;
    int numCell = data->numCell;
    int numComp = data->numComp;
    int nGhost = data->nGhost;
    int full_numCell = data->fullNumCell;
    int full_numCell2 = data->fullNumCell2;
    int full_numCell3 = data->fullNumCell3;

    // Start timer...
    struct timeval tval;
    gettimeofday(&tval, NULL);
    double startTime = (double) tval.tv_sec + (((double) tval.tv_usec) / 1000000);

    Real **sums = data->sums;

    //#pragma omp parallel for default(shared)
    for (int i=0; i < numBox; i++) {
        pipeline_minifluxdiv(numCell, old_boxes[i], sums[i]);
    }

    // Stop timer...
    gettimeofday(&tval, NULL);
    data->innerTime = ((double) tval.tv_sec + (((double) tval.tv_usec) / 1000000)) - startTime;

    // Now we need to transfer 'sums' to 'new_boxes' just as in Halide version.
    sumsToBoxes(sums, new_boxes, numBox, numCell);
}	// miniFluxdiv_kernel

inline void miniFluxDiv_free(MiniFluxDivData* data) {
    for (int b = 0; b < data->numBox; b++) {
        free(data->sums[b]);
    }

    free(data->sums);
}    // miniFluxDiv_free
