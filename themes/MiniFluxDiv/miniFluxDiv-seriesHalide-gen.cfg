/**
    This file is part of MiniFluxDiv.

    MiniFluxDiv is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    MiniFluxDiv is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MiniFluxDiv. If not, see <http://www.gnu.org/licenses/>.
 **/

#include <Halide.h>
#include <vector>

using namespace Halide;

//<Variables>

typedef double Real;

//<Data Structure>
typedef struct _MiniFluxDivData {
    int numCell;
    int numBox;
    int numComp;
    int nThreads;
    int nGhost;
    // The size of the 3D data is (numCell+2*nGhost)^3
    int fullNumCell;
    int fullNumCell2;
    int fullNumCell3;

    double innerTime;

    // Halide buffers:
    Buffer<double> *p_inputs;
    Buffer<double> *e_inputs;
    Buffer<double> *u_inputs;
    Buffer<double> *v_inputs;
    Buffer<double> *w_inputs;
} MiniFluxDivData;

//<Macros>
#define ABS(x)  ((x)<0)?-(x):(x)
#define EPS .001
#define N_A  1E20

#define NBOXES 32
#define NCELLS 128
#define NTHREADS 1
#define NDIMS 3
#define NCOMP 5
#define NGHOST 2

#define XS TILE_SIZE
#define YS TILE_SIZE
#define ZS TILE_SIZE

#define GET_OFFSET(c,z,y,x) (c)*full_numCell3 + ((z)+nGhost)*full_numCell2 + ((y)+nGhost)*full_numCell + ((x)+nGhost)

#undef GET_VAL_PTR
#define GET_VAL_PTR(b,c,z,y,x) (b)+ (c)*full_numCell3 + ((z)+nGhost) * full_numCell2 +\
                    ((y)+nGhost)*full_numCell+((x)+nGhost)

#define GET_FACE_VAL_PTR(d,b,c,z,y,x) (b)+\
        (c)*(numCell+((d)==2))*(numCell+((d)==1))*(numCell+((d)==0)) +\
        (z)*(numCell+((d)==1))*(numCell+((d)==0))+\
        (y)*(numCell+((d)==0))+(x)

#define p_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,0,z,y,x))
#define e_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,1,z,y,x))
#define u_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,2,z,y,x))
#define v_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,3,z,y,x))
#define w_DATA_old(z,y,x) *(GET_VAL_PTR(old_box,4,z,y,x))

#define p_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,0,z,y,x))
#define e_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,1,z,y,x))
#define u_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,2,z,y,x))
#define v_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,3,z,y,x))
#define w_DATA_new(z,y,x) *(GET_VAL_PTR(new_box,4,z,y,x))

#define p_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,0,z,y,x))
#define e_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,1,z,y,x))
#define u_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,2,z,y,x))
#define v_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,3,z,y,x))
#define w_DATA_ref(z,y,x) *(GET_VAL_PTR(ref_box,4,z,y,x))

#define p_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,0,z,y,x))
#define e_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,1,z,y,x))
#define u_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,2,z,y,x))
#define v_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,3,z,y,x))
#define w_CACHE_x(z,y,x) *(GET_FACE_VAL_PTR(0,g_cache,4,z,y,x))

#define p_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,0,z,y,x))
#define e_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,1,z,y,x))
#define u_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,2,z,y,x))
#define v_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,3,z,y,x))
#define w_CACHE_y(z,y,x) *(GET_FACE_VAL_PTR(1,g_cache,4,z,y,x))

#define p_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,0,z,y,x))
#define e_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,1,z,y,x))
#define u_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,2,z,y,x))
#define v_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,3,z,y,x))
#define w_CACHE_z(z,y,x) *(GET_FACE_VAL_PTR(2,g_cache,4,z,y,x))

inline void buffersToBoxes(const vector< Buffer<double> >& p_boxes,
                           const vector< Buffer<double> >& e_boxes,
                           const vector< Buffer<double> >& u_boxes,
                           const vector< Buffer<double> >& v_boxes,
                           const vector< Buffer<double> >& w_boxes,
                           Real **new_boxes, int numBox, int numCell) {

    int nGhost = NGHOST;
    int full_numCell= numCell+2*nGhost;
    int full_numCell2= full_numCell*full_numCell;
    int full_numCell3= full_numCell*full_numCell*full_numCell;

    for (int i = 0; i < numBox; i++) {
        double *box = new_boxes[i];
        for (int z = 0; z < numCell; z++) {
            for (int y = 0; y < numCell; y++) {
                for (int x = 0; x < numCell; x++) {
                    //for(int c=0;c<numComp;c++){
                    *(GET_VAL_PTR(box, 0, z, y, x)) = (p_boxes[i])(z, y, x);
                    *(GET_VAL_PTR(box, 1, z, y, x)) = (e_boxes[i])(z, y, x);
                    *(GET_VAL_PTR(box, 2, z, y, x)) = (u_boxes[i])(z, y, x);
                    *(GET_VAL_PTR(box, 3, z, y, x)) = (v_boxes[i])(z, y, x);
                    *(GET_VAL_PTR(box, 4, z, y, x)) = (w_boxes[i])(z, y, x);
                }
            }
        }
    }
}

inline void miniFluxDiv_alloc(MiniFluxDivData* data) {
    int numBox = data->numBox;
    int numCell = data->numCell;
    int nGhost = NGHOST;
    int full_numCell= numCell+2*nGhost;

    Expr diff = cast<double>(0.5f);
    Expr one = cast<double>(1.0f);
    Expr two = cast<double>(2.0f);
    Expr three = cast<double>(3.0f);
    Expr four = cast<double>(4.0f);

    data->p_inputs = new Buffer<double>[numBox];
    data->e_inputs = new Buffer<double>[numBox];
    data->u_inputs = new Buffer<double>[numBox];
    data->v_inputs = new Buffer<double>[numBox];
    data->w_inputs = new Buffer<double>[numBox];

    data->innerTime = 0.0;

    for (int idx = 0; idx < numBox; idx++) {
        // Initialize data, corresponds to (x,y,z) in a box...
        Var ix("ix"), iy("iy"), iz("iz");

        Func p_init, e_init, u_init, v_init, w_init;
        p_init(iz,iy,ix) = diff * ((iz-2)+(iy-2)+(ix-2));
        e_init(iz,iy,ix) = one + diff * (iz+iy+ix-6);
        u_init(iz,iy,ix) = two + diff * (iz+iy+ix-6);
        v_init(iz,iy,ix) = three + diff * (iz+iy+ix-6);
        w_init(iz,iy,ix) = four + diff * (iz+iy+ix-6);

        // The input buffers correspond to 'old_box'.
        Buffer<double> p_input = p_init.realize(full_numCell, full_numCell, full_numCell);
        Buffer<double> e_input = e_init.realize(full_numCell, full_numCell, full_numCell);
        Buffer<double> u_input  = u_init.realize(full_numCell, full_numCell, full_numCell);
        Buffer<double> v_input  = v_init.realize(full_numCell, full_numCell, full_numCell);
        Buffer<double> w_input  = w_init.realize(full_numCell, full_numCell, full_numCell);

        data->p_inputs[idx] = p_input;
        data->e_inputs[idx] = e_input;
        data->u_inputs[idx] = u_input;
        data->v_inputs[idx] = v_input;
        data->w_inputs[idx] = w_input;
    }
}   // miniFluxDiv_alloc

inline void miniFluxDiv_kernel(Real **old_boxes, Real **new_boxes, MiniFluxDivData* data) {
    //<Insert your kernel code here...>
    int numBox = data->numBox;
    int numCell = data->numCell;
    int numComp = data->numComp;
    int nGhost = data->nGhost;
    int full_numCell = data->fullNumCell;
    int full_numCell2 = data->fullNumCell2;
    int full_numCell3 = data->fullNumCell3;

    Buffer<double> *p_inputs = data->p_inputs;
    Buffer<double> *e_inputs = data->e_inputs;
    Buffer<double> *u_inputs = data->u_inputs;
    Buffer<double> *v_inputs = data->v_inputs;
    Buffer<double> *w_inputs = data->w_inputs;

    vector< Buffer<double> > p_outputs(numBox);
    vector< Buffer<double> > e_outputs(numBox);
    vector< Buffer<double> > u_outputs(numBox);
    vector< Buffer<double> > v_outputs(numBox);
    vector< Buffer<double> > w_outputs(numBox);

    Expr fac1 = cast<double>(1.f/12.f);
    Expr fac2 = cast<double>(2.f);
    Expr seven = cast<double>(7.0f);

    Var ix("ix"), iy("iy"), iz("iz");

    // Start timer...
    struct timeval tval;
    gettimeofday(&tval, NULL);
    double startTime = (double) tval.tv_sec + (((double) tval.tv_usec) / 1000000);

    Target target = get_jit_target_from_environment();

    //#pragma omp parallel for default(shared)
    for (int idx=0; idx < numBox; idx++) {
//        int tid = omp_get_thread_num();

        vector< Buffer<double> > inputs(NCOMP);
        inputs[0] = p_inputs[idx];
        inputs[1] = e_inputs[idx];
        inputs[2] = u_inputs[idx];
        inputs[3] = v_inputs[idx];
        inputs[4] = w_inputs[idx];

        // F1X
        vector<Func> f1x(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            Buffer<double> input = inputs[c];
            f1x[c](iz,iy,ix) = fac1 * (input(iz+2,iy+2,ix+2-2)
                                    + seven*(input(iz+2,iy+2,ix+2-1) + input(iz+2,iy+2,ix+2))
                                    + input(iz+2,iy+2,ix+2+1));
        }

        // F2X
        vector<Func> f2x(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            f2x[c](iz,iy,ix) = fac2*(f1x[c](iz,iy,ix) * f1x[2](iz,iy,ix));
        }

        // DX
        vector<Func> dx(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            dx[c](iz,iy,ix) = f2x[c](iz, iy, ix + 1) - f2x[c](iz, iy, ix);
        }

        // FY1
        vector<Func> f1y(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            Buffer<double> input = inputs[c];
            f1y[c](iz,iy,ix) = fac1 * (input(iz+2,iy+2-2,ix+2)
                                 + seven*(input(iz+2,iy+2-1,ix+2) + input(iz+2,iy+2,ix+2))
                                 + input(iz+2,iy+2+1,ix+2));
        }

        // F2Y
        vector<Func> f2y(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            f2y[c](iz,iy,ix) = fac2 * (f1y[c](iz,iy,ix) * f1y[3](iz,iy,ix));
        }

        // DY
        vector<Func> dy(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            dy[c](iz,iy,ix) = f2y[c](iz, iy + 1, ix) - f2y[c](iz, iy, ix);
        }

        // F1Z
        vector<Func> f1z(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            Buffer<double> input = inputs[c];
            f1z[c](iz,iy,ix) = fac1 * (input(iz+2-2,iy+2,ix+2)
                                    + seven*(input(iz+2-1,iy+2,ix+2) + input(iz+2,iy+2,ix+2))
                                    + input(iz+2+1,iy+2,ix+2));
        }

        // F2Z
        vector<Func> f2z(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            f2z[c](iz,iy,ix) = fac2 * (f1z[c](iz,iy,ix) * f1z[4](iz,iy,ix));
        }

        // DZ
        vector<Func> dz(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            dz[c](iz,iy,ix) = f2z[c](iz+1, iy, ix) - f2z[c](iz, iy, ix);
        }

        // Sum of Diffs
        vector<Func> sum(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            Buffer<double> input = inputs[c];
            sum[c](iz,iy,ix) = dz[c](iz,iy,ix) + dy[c](iz,iy,ix) + dx[c](iz,iy,ix) + input(iz+2,iy+2,ix+2);
        }

        vector<string> names(NCOMP);
        names[0] = "p_sum";
        names[1] = "e_sum";
        names[2] = "u_sum";
        names[3] = "v_sum";
        names[4] = "w_sum";

        // Auto-schedule the pipelines
        vector<Pipeline> pipelines(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            Pipeline pipe(sum[c]);
            pipelines[c] = pipe;

            sum[c].estimate(ix, 0, numCell).estimate(iy, 0, numCell).estimate(iz, 0, numCell);
            pipelines[c].auto_schedule(target);
            // Inspect the schedule
            //pipelines[c].print_loop_nest();
            // Compile the pipeline...
            pipelines[c].compile_to_static_library(names[c], {inputs[c]}, names[c]);
            //compile_to_static_library (const std::string &filename_prefix, const std::vector< Argument > &args, const std::string &fn_name="
        }


        // Provide estimates on the pipeline output
        //p_sum.estimate(ix, 0, numCell).estimate(iy, 0, numCell).estimate(iz, 0, numCell);

        // Auto-schedule the pipeline
        //p_pipe.auto_schedule(target);

        //p_pipe.print_loop_nest();

        // Run the schedules
        vector< Buffer<double> > outputs(NCOMP);
        for (int c = 0; c < NCOMP; c++) {
            outputs[c] = pipelines[c].realize(numCell,numCell,numCell);
        }

        p_outputs[idx] = outputs[0];
        e_outputs[idx] = outputs[1];
        u_outputs[idx] = outputs[2];
        v_outputs[idx] = outputs[3];
        w_outputs[idx] = outputs[4];
    }

    // Stop timer...
    gettimeofday(&tval, NULL);
    data->innerTime = ((double) tval.tv_sec + (((double) tval.tv_usec) / 1000000)) - startTime;

    // Transfer Halide buffers to new_boxes...
    buffersToBoxes(p_outputs, e_outputs, u_outputs, v_outputs, w_outputs, new_boxes, numBox, numCell);
}	// miniFluxdiv_kernel

inline void miniFluxDiv_free(MiniFluxDivData* data) {
    delete[] data->p_inputs;
    delete[] data->e_inputs;
    delete[] data->u_inputs;
    delete[] data->v_inputs;
    delete[] data->w_inputs;
}    // miniFluxDiv_free
